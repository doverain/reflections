Reflections
Fun but a total waste of time.
How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
It couldsave me if I made a mistake, because I could go back to a previous more correct version.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having 
versions automatically saved, like Google Docs does?
pro commits are more logical  con you might forget

old version control systems:
CVS Concurrent Version Systems
SVN Subversion - Better version of CVS
hg Mercurial - Similar to GIT
GIT created in 2005 by Linus Torvalds  Git is British slang for an unwanted person.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, 
like Google Docs, treat each file separately?
In programming you often have multiple files involved.

How can you use the commands git log and git diff to view the history of files?
use them.
Git diff: The commit id for the msg you want is the one before it.  The previous commit id is the one after the message.
Git log: To page down and up use up and down arrows or 'd' and 'u'.  To exit press 'q'.

git checkout <commit id>  where commit id is the one you want to run to see if there's a bug.  Make a note of the 
original id so you can go back to it.

To copy, highlight from end to front press <ctrl> c Repeat going front to end.  type what you want and press right 
button to paste.

Process for making changes:
Assuming repository is created and your files are in it.
Edit file and save changes.
git add <file>
git diff    (*to make sure all is ok *)
git commit -m "message summarizing whatever you did"

To create a new branch and switch to it immediately:
git checkout -b <new branch name>

